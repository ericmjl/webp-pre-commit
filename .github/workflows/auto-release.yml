name: Auto Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  auto-release:
    runs-on: ubuntu-latest
    # Only run if the PR was actually merged (not just closed)
    # Skip if the commit message contains "chore: bump version" (prevents self-triggering)
    if: |
      github.event.pull_request.merged == true &&
      !contains(github.event.head_commit.message, 'chore: bump version')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0  # Fetch all history for proper version bumping
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v7

      - name: Install llamabot
        run: |
          uv add --dev llamabot

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        id: version
        run: |
          # Get the current version from pyproject.toml
          CURRENT_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "Current version: $CURRENT_VERSION"

          # Bump patch version using uv
          uv version --bump patch

          # Get the new version
          NEW_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Create and push the tag
          git tag "v$NEW_VERSION"
          git push origin "v$NEW_VERSION"

          # Push the updated pyproject.toml
          git add pyproject.toml
          git commit -m "chore: bump version to $NEW_VERSION"
          git push origin main

      - name: Generate release notes with llamabot
        id: release_notes
        run: |
          # Generate release notes using llamabot
          RELEASE_NOTES=$(uv run --with llamabot[all] llamabot git write-release-notes)
          echo "Generated release notes:"
          echo "$RELEASE_NOTES"

          # Save to file for GitHub API
          echo "$RELEASE_NOTES" > release_notes.md

          # Also output for GitHub Actions
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release via API
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Read release notes from file
          RELEASE_BODY=$(cat release_notes.md)

          # Escape JSON special characters
          RELEASE_BODY=$(echo "$RELEASE_BODY" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')

          # Create release using GitHub API
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d "{
              \"tag_name\": \"v${{ steps.version.outputs.new_version }}\",
              \"target_commitish\": \"main\",
              \"name\": \"v${{ steps.version.outputs.new_version }}\",
              \"body\": \"$RELEASE_BODY\",
              \"draft\": false,
              \"prerelease\": false
            }"
